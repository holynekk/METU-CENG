
# Name: Mert Kaan YILMAZ
# Number: 2381093

# Execution begins at adress 0
.pos 0
	irmovq Stack, %rsp        # Set stack pointer
	irmovq root, %rdi         # Set first parameter of the function
	call max_btree            # Call max_btree(root)  
	halt                      # Terminate the program

max_btree:
	irmovq $-2147483647, %rax # Set return value as LONG_MIN (1<<63)
	andq %rdi, %rdi           # if (root)
	jne look_tree             # Go into loop
	ret                       # Else return 
look_tree:
	pushq %rdi                # Save root
	mrmovq 8(%rdi), %rdi      # Go left first
	call max_btree            # Call for left
	popq %rdi                 # restore root after return
	rrmovq %rax, %r8          # -
	mrmovq (%rdi), %rax       # -
	subq %rax, %r9            # - if (candidate > max) max = candidate;
	cmovg %r8, %rax           # -
	pushq %rax                # Save max
	pushq %rdi                # Save root
	mrmovq 16(%rdi), %rdi     # Go right
	call max_btree            # Call for Right
	popq %rdi                 # restore root after return
	rrmovq %rax, %r8          # -
	rrmovq %r8, %r9           # -
	popq %rax                 # - if (candidate > max) max = candidate;
	subq %rax, %r9            # -
	cmovg %r8, %rax           # -
	ret	

# A sample binary (not search!) tree

.pos 0x200
root:
	.quad 5
	.quad node7
	.quad node12
node7:
	.quad 7
	.quad node25
	.quad node905
node25:
	.quad 25
	.quad 0
	.quad 0
node905:
	.quad 905
	.quad nodem1
	.quad 0
nodem1:
	.quad -1
	.quad 0
	.quad 0
node12:
	.quad 12
	.quad node219
	.quad nodem10
node219:
	.quad 219
	.quad 0
	.quad 0
nodem10:
	.quad -10
	.quad 0
	.quad node331
node331:
	.quad 331	
	.quad 0
	.quad 0

.pos 0x800
Stack:
