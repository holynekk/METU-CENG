#/* $begin absrev-ys */
##################################################################
# absrev.ys - Reverse a src block of len words to dst.
# Return the sum of absolute values of words contained in src.
#
# Include your name and ID here.
# Describe how and why you modified the baseline code.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
absrev:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax,%rax    	# sum = 0;
    
    # all this for dst_rev = dst + len - 1
    xorq %rcx, %rcx     # zero rcx
    addq %rdx, %rcx     # add len eight times
    addq %rdx, %rcx
    addq %rdx, %rcx
    addq %rdx, %rcx
    addq %rdx, %rcx
    addq %rdx, %rcx
    addq %rdx, %rcx
    addq %rdx, %rcx
    irmovq $8, %r8      # for subtracting 8
    addq %rsi, %rcx     # add dst
    subq %r8, %rcx      # finally, rcx holds dst_rev

    andq %rdx,%rdx    	# len <= 0?
    jle Done            # if so, goto Done:
Loop:    
    mrmovq (%rdi), %r10 # read val from src...
    rmmovq %r10, (%rcx) # ...and store it to dst
    andq %r10, %r10    	# val >= 0?
    jge Positive        # if so, skip negating
    rrmovq %r10, %r9    # temporary move
    xorq %r10, %r10     # zero r10
    subq %r9, %r10      # negation achieved!
Positive:
    addq %r10, %rax     # sum += absval
    irmovq $1, %r10
    subq %r10, %rdx    	# len--
    irmovq $8, %r10
    addq %r10, %rdi    	# src++
    subq %r10, %rcx    	# dst_rev--
    andq %rdx,%rdx    	# len > 0?
    jg Loop             # if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end absrev-ys */
