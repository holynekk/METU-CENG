                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72001000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f33103710500000000 |     irmovq $0x5710331, %rbx
0x03c: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x046: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x050: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x05a: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x064: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x06e: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x078: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x082: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x08c: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x096: 80a000000000000000   | 	call absrev		 
0x09f: 00                   | 	halt			# should halt with abs sum in %rax
0x0a0:                      | StartFun:
                            | #/* $begin absrev-ys */
                            | ##################################################################
                            | # absrev.ys - Reverse a src block of len words to dst.
                            | # Return the sum of absolute values of words contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Describe how and why you modified the baseline code.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x0a0:                      | absrev:
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
0x0a0: 6300                 |     xorq %rax,%rax    	# sum = 0;
                            |     
                            |     # all this for dst_rev = dst + len - 1
0x0a2: 6311                 |     xorq %rcx, %rcx     # zero rcx
0x0a4: 6021                 |     addq %rdx, %rcx     # add len eight times
0x0a6: 6021                 |     addq %rdx, %rcx
0x0a8: 6021                 |     addq %rdx, %rcx
0x0aa: 6021                 |     addq %rdx, %rcx
0x0ac: 6021                 |     addq %rdx, %rcx
0x0ae: 6021                 |     addq %rdx, %rcx
0x0b0: 6021                 |     addq %rdx, %rcx
0x0b2: 6021                 |     addq %rdx, %rcx
0x0b4: 30f80800000000000000 |     irmovq $8, %r8      # for subtracting 8
0x0be: 6061                 |     addq %rsi, %rcx     # add dst
0x0c0: 6181                 |     subq %r8, %rcx      # finally, rcx holds dst_rev
                            | 
0x0c2: 6222                 |     andq %rdx,%rdx    	# len <= 0?
0x0c4: 711901000000000000   |     jle Done            # if so, goto Done:
0x0cd:                      | Loop:    
0x0cd: 50a70000000000000000 |     mrmovq (%rdi), %r10 # read val from src...
0x0d7: 40a10000000000000000 |     rmmovq %r10, (%rcx) # ...and store it to dst
0x0e1: 62aa                 |     andq %r10, %r10    	# val >= 0?
0x0e3: 75f200000000000000   |     jge Positive        # if so, skip negating
0x0ec: 20a9                 |     rrmovq %r10, %r9    # temporary move
0x0ee: 63aa                 |     xorq %r10, %r10     # zero r10
0x0f0: 619a                 |     subq %r9, %r10      # negation achieved!
0x0f2:                      | Positive:
0x0f2: 60a0                 |     addq %r10, %rax     # sum += absval
0x0f4: 30fa0100000000000000 |     irmovq $1, %r10
0x0fe: 61a2                 |     subq %r10, %rdx    	# len--
0x100: 30fa0800000000000000 |     irmovq $8, %r10
0x10a: 60a7                 |     addq %r10, %rdi    	# src++
0x10c: 61a1                 |     subq %r10, %rcx    	# dst_rev--
0x10e: 6222                 |     andq %rdx,%rdx    	# len > 0?
0x110: 76cd00000000000000   |     jg Loop             # if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x119:                      | Done:
0x119: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x11a:                      | End:
                            | #/* $end absrev-ys */
0x11a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x120:                      | 	.align 8
0x120:                      | src:
0x120: 0100000000000000     | 	.quad 1
0x128: feffffffffffffff     | 	.quad -2
0x130: 0300000000000000     | 	.quad 3
0x138: 0400000000000000     | 	.quad 4
0x140: fbffffffffffffff     | 	.quad -5
0x148: 0600000000000000     | 	.quad 6
0x150: f9ffffffffffffff     | 	.quad -7
0x158: 0800000000000000     | 	.quad 8
0x160: f7ffffffffffffff     | 	.quad -9
0x168: 0a00000000000000     | 	.quad 10
0x170: 0b00000000000000     | 	.quad 11
0x178: f4ffffffffffffff     | 	.quad -12
0x180: 0d00000000000000     | 	.quad 13
0x188: 0e00000000000000     | 	.quad 14
0x190: 0f00000000000000     | 	.quad 15
0x198: 1000000000000000     | 	.quad 16
0x1a0: 1100000000000000     | 	.quad 17
0x1a8: eeffffffffffffff     | 	.quad -18
0x1b0: edffffffffffffff     | 	.quad -19
0x1b8: ecffffffffffffff     | 	.quad -20
0x1c0: ebffffffffffffff     | 	.quad -21
0x1c8: 1600000000000000     | 	.quad 22
0x1d0: 1700000000000000     | 	.quad 23
0x1d8: e8ffffffffffffff     | 	.quad -24
0x1e0: e7ffffffffffffff     | 	.quad -25
0x1e8: e6ffffffffffffff     | 	.quad -26
0x1f0: 1b00000000000000     | 	.quad 27
0x1f8: e4ffffffffffffff     | 	.quad -28
0x200: e3ffffffffffffff     | 	.quad -29
0x208: e2ffffffffffffff     | 	.quad -30
0x210: e1ffffffffffffff     | 	.quad -31
0x218: e0ffffffffffffff     | 	.quad -32
0x220: 2100000000000000     | 	.quad 33
0x228: deffffffffffffff     | 	.quad -34
0x230: ddffffffffffffff     | 	.quad -35
0x238: 2400000000000000     | 	.quad 36
0x240: 2500000000000000     | 	.quad 37
0x248: 2600000000000000     | 	.quad 38
0x250: 2700000000000000     | 	.quad 39
0x258: 2800000000000000     | 	.quad 40
0x260: 2900000000000000     | 	.quad 41
0x268: 2a00000000000000     | 	.quad 42
0x270: 2b00000000000000     | 	.quad 43
0x278: 2c00000000000000     | 	.quad 44
0x280: 2d00000000000000     | 	.quad 45
0x288: d2ffffffffffffff     | 	.quad -46
0x290: d1ffffffffffffff     | 	.quad -47
0x298: d0ffffffffffffff     | 	.quad -48
0x2a0: cfffffffffffffff     | 	.quad -49
0x2a8: 3200000000000000     | 	.quad 50
0x2b0: 3300000000000000     | 	.quad 51
0x2b8: 3400000000000000     | 	.quad 52
0x2c0: 3500000000000000     | 	.quad 53
0x2c8: 3600000000000000     | 	.quad 54
0x2d0: c9ffffffffffffff     | 	.quad -55
0x2d8: c8ffffffffffffff     | 	.quad -56
0x2e0: c7ffffffffffffff     | 	.quad -57
0x2e8: c6ffffffffffffff     | 	.quad -58
0x2f0: c5ffffffffffffff     | 	.quad -59
0x2f8: c4ffffffffffffff     | 	.quad -60
0x300: c3ffffffffffffff     | 	.quad -61
0x308: c2ffffffffffffff     | 	.quad -62
0x310: c1ffffffffffffff     | 	.quad -63
0x318: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x320:                      | 	.align 16
0x320:                      | Predest:
0x320: fadebc0000000000     | 	.quad 0xbcdefa
0x328:                      | dest:
0x328: abefcd0000000000     | 	.quad 0xcdefab
0x330: abefcd0000000000     | 	.quad 0xcdefab
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520:                      | Postdest:
0x520: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x528:                      | .align 8
                            | # Run time stack
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
                            | 
0x5a8:                      | Stack:
